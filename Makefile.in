# Makefile.in
#
# Copyright Â© 2012, 2013 Brandon Invergo <brandon@invergo.net>
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# List whatever files you want to include in your source distribution here.
# You can include whole directories but note that *everything* under that
# directory will be included
DISTFILES = PKG-INFO Makefile.in configure setup.py install-sh

DESTDIR =
VPATH = @srcdir@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_DISTNAME = ${PACKAGE_NAME}-${PACKAGE_VERSION}
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PYTHON = @PYTHON@
VIRTUALENV = @VIRTUALENV@
SHELL = @SHELL@
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
exec_prefix = @exec_prefix@
includedir = @includedir@
infodir = @infodir@
prefix = @prefix@
srcdir = @srcdir@
datadir = @datadir@
datarootdir = @datarootdir@
pythondir = @pythondir@
pyexecdir = @pyexecdir@
pkgdatadir = $(datadir)/@PACKAGE_NAME@
pkgincludedir = $(includedir)/@PACKAGE_NAME@
pkgpythondir = @pkgpythondir@
pkgpyexecdir = @pkgpyexecdir@
PYTHONPATH = $(pythondir)$(PATH_SEPARATOR)$(DESTDIR)$(pythondir)

BUILD_DIR ?= $(srcdir)/build
DOWNLOAD_DIR ?= $(srcdir)/download
DO_DOWNLOAD ?= curl -sSfL -o

ENABLE_PRECOMPILED_BINARIES = @ENABLE_PRECOMPILED_BINARIES@
DOCKER_ARCH = @DOCKER_ARCH@

ENABLE_OPENGRM = @ENABLE_OPENGRM@
OPENGRM_ARCH = @OPENGRM_ARCH@
OPENGRM_PRE_FILE = $(DOWNLOAD_DIR)/opengrm-1.3.4-$(DOCKER_ARCH).tar.gz
OPENGRM_SRC_FILE = $(DOWNLOAD_DIR)/opengrm-ngram-1.3.4.tar.gz
OPENFST_SRC_FILE = $(DOWNLOAD_DIR)/openfst-1.6.9.tar.gz

ENABLE_PHONETISAURUS = @ENABLE_PHONETISAURUS@
PHONETISAURUS_ARCH = @PHONETISAURUS_ARCH@
PHONETISAURUS_PRE_FILE = $(DOWNLOAD_DIR)/phonetisaurus-2019-$(DOCKER_ARCH).tar.gz
PHONETISAURUS_SRC_FILE = $(DOWNLOAD_DIR)/phonetisaurus-2019.tar.gz

ENABLE_PRECISE = @ENABLE_PRECISE@
PRECISE_ARCH = @PRECISE_ARCH@
PRECISE_FILE = $(DOWNLOAD_DIR)/precise-engine_0.3.0_$(DOCKER_ARCH).tar.gz

ENABLE_POCKETSPHINX = @ENABLE_POCKETSPHINX@
POCKETSPHINX_FILE = $(DOWNLOAD_DIR)/pocketsphinx-python.tar.gz

ENABLE_KALDI = @ENABLE_KALDI@
KALDI_ARCH = @KALDI_ARCH@
KALDI_PRE_FILE = $(DOWNLOAD_DIR)/kaldi-2020-$(DOCKER_ARCH).tar.gz
KALDI_SRC_FILE = $(DOWNLOAD_DIR)/kaldi-2020.tar.gz

ENABLE_JULIUS = @ENABLE_JULIUS@
JULIUS_ARCH = @JULIUS_ARCH@
JULIUS_PRE_FILE = $(DOWNLOAD_DIR)/julius-4.5_$(DOCKER_ARCH).tar.gz
JULIUS_SRC_FILE = $(DOWNLOAD_DIR)/julius-2019.tar.gz

ENABLE_DEEPSPEECH = @ENABLE_DEEPSPEECH@
DEEPSPEECH_ARCH = @DEEPSPEECH_ARCH@
DEEPSPEECH_FILE = $(DOWNLOAD_DIR)/native_client.$(DOCKER_ARCH).cpu.linux.0.6.1.tar.xz

ENABLE_KENLM = @ENABLE_KENLM@
KENLM_ARCH = @KENLM_ARCH@
KENLM_PRE_FILE = $(DOWNLOAD_DIR)/kenlm-20200308_$(DOCKER_ARCH).tar.gz
EIGEN_SRC_FILE = $(DOWNLOAD_DIR)/eigen-3.2.8.tar.bz2
KENLM_SRC_FILE = $(DOWNLOAD_DIR)/kenlm-20200308.tar.gz

VENV_DIR = $(DESTDIR)$(prefix)
VENV_PYTHON = $(VENV_DIR)/bin/python

ifeq ($(VIRTUALENV),yes)
  INSTALL_PYTHON=$(VENV_PYTHON)
else # VIRTUALENV == yes
  INSTALL_PYTHON=$(PYTHON)
endif # VIRTUALENV == yes

.PHONY: all install uninstall distclean clean dist check installdirs download build

all: download build

.PHONY: installdirs install-init install-opengrm install-phonetisaurus install-precise install-pocketsphinx install-kaldi install-julius install-deepspeech install-kenlm
install: installdirs \
         install-init \
         install-opengrm \
         install-phonetisaurus \
         install-precise \
         install-pocketsphinx \
         install-kaldi \
         install-julius \
         install-deepspeech
	"$(INSTALL_PYTHON)" "$(srcdir)/setup.py" install "--prefix=$(DESTDIR)$(prefix)"
	chmod +x "${srcdir}/voice2json.sh"
	install -D "${srcdir}/voice2json.sh" "$(DESTDIR)$(prefix)/bin/voice2json"

install-init:
ifeq ($(VIRTUALENV),yes)
	"$(PYTHON)" -m venv $(VIRTUALENV_FLAGS) "$(VENV_DIR)" || "$(PYTHON)" -m venv "$(VENV_DIR)"
	"$(VENV_PYTHON)" -m pip install --upgrade pip
	"$(VENV_PYTHON)" -m pip install setuptools wheel
endif # VIRTUALENV == yes

install-pocketsphinx:
ifeq ($(ENABLE_POCKETSPHINX),yes)
	"$(INSTALL_PYTHON)" -m pip install "$(POCKETSPHINX_FILE)"
endif # ENABLE_POCKETSPHINX

install-opengrm:
ifeq ($(ENABLE_OPENGRM),yes)
	"$(srcdir)/scripts/install/install-opengrm.sh" "$(OPENGRM_PRE_FILE)" "$(DESTDIR)$(prefix)"
endif # ENABLE_OPENGRM

install-phonetisaurus:
ifeq ($(ENABLE_PHONETISAURUS),yes)
	"$(srcdir)/scripts/install/install-phonetisaurus.sh" "$(PHONETISAURUS_PRE_FILE)" "$(DESTDIR)$(prefix)"
endif # ENABLE_PHONETISAURUS

install-precise:
ifeq ($(ENABLE_PRECISE),yes)
	"$(srcdir)/scripts/install/install-precise.sh" "$(PRECISE_FILE)" "$(DESTDIR)$(prefix)"
endif # ENABLE_PRECISE

install-deepspeech: install-kenlm
ifeq ($(ENABLE_DEEPSPEECH),yes)
	"$(srcdir)/scripts/install/install-deepspeech.sh" "$(DEEPSPEECH_FILE)" "$(DEST_DIR)$(prefix)"
endif # ENABLE_DEEPSPEECH

install-kenlm:
ifeq ($(ENABLE_KENLM),yes)
	"$(srcdir)/scripts/install/install-kenlm.sh" "$(KENLM_PRE_FILE)" "$(DEST_DIR)$(prefix)"
endif # ENABLE_KENLM

# -----------------------------------------------------------------------------
# Downloads
# -----------------------------------------------------------------------------

.PHONY: download-init download-opengrm download-phonetisaurus download-precise download-pocketsphinx download-kaldi download-deepspeech download-kenlm
download: download-init \
          download-opengrm \
          download-phonetisaurus \
          download-precise \
          download-pocketsphinx \
          download-kaldi \
          download-deepspeech

download-init:
	$(MKDIR_P) "$(DOWNLOAD_DIR)"

download-opengrm:
ifeq ($(ENABLE_OPENGRM),yes)
ifeq ($(ENABLE_PRECOMPILED_BINARIES),yes)
	if [ ! -s "$(OPENGRM_PRE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(OPENGRM_PRE_FILE)" "https://github.com/synesthesiam/docker-opengrm/releases/download/v1.3.4/opengrm-1.3.4-$(OPENGRM_ARCH).tar.gz" ; \
	fi
else # ENABLE_PRECOMPILED_BINARIES
	if [ ! -s "$(OPENFST_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(OPENFST_SRC_FILE)" 'http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-1.6.9.tar.gz' ; \
	fi
	if [ ! -s "$(OPENGRM_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(OPENGRM_SRC_FILE)" 'http://www.opengrm.org/twiki/pub/GRM/NGramDownload/opengrm-ngram-1.3.4.tar.gz' ; \
	fi
endif # ENABLE_PRECOMPILED_BINARIES
endif # ENABLE_OPENGRM

download-phonetisuarus:
ifeq ($(ENABLE_PHONETISAURUS),yes)
ifeq ($(ENABLE_PRECOMPILED_BINARIES),yes)
	if [ ! -s "$(PHONETISAURUS_PRE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(PHONETISAURUS_PRE_FILE)" "https://github.com/synesthesiam/docker-phonetisaurus/releases/download/v2019.1/phonetisaurus-2019-$(PHONETISAURUS_ARCH).tar.gz" ; \
	fi
else # ENABLE_PRECOMPILED_BINARIES
	if [ ! -s "$(OPENFST_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(OPENFST_SRC_FILE)" 'http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-1.6.9.tar.gz' ; \
	fi
	if [ ! -s "$(PHONETISAURUS_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(PHONETISAURUS_SRC_FILE)" 'https://github.com/synesthesiam/docker-phonetisaurus/blob/master/download/phonetisaurus-2019.tar.gz?raw=true' ; \
	fi
endif # ENABLE_PRECOMPILED_BINARIES
endif # ENABLE_PHONETISAURUS

download-precise:
ifeq ($(ENABLE_PRECISE),yes)
	if [ ! -s "$(PRECISE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(PRECISE_FILE)" "https://github.com/MycroftAI/mycroft-precise/releases/download/v0.3.0/precise-engine_0.3.0_$(PRECISE_ARCH).tar.gz" ; \
	fi
endif # ENABLE_PRECISE

download-pocketsphinx:
ifeq ($(ENABLE_POCKETSPHINX),yes)
	if [ ! -s "$(POCKETSPHINX_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(POCKETSPHINX_FILE)" 'https://github.com/synesthesiam/pocketsphinx-python/releases/download/v1.0/pocketsphinx-python.tar.gz' ; \
	fi
endif # ENABLE_POCKETSPHINX

download-kaldi:
ifeq ($(ENABLE_KALDI),yes)
ifeq ($(ENABLE_PRECOMPILED_BINARIES),yes)
	if [ ! -s "$(KALDI_PRE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(KALDI_PRE_FILE)" "https://github.com/synesthesiam/kaldi-docker/releases/download/v1.0/kaldi_$(KALDI_ARCH).tar.gz" ; \
	fi
else # ENABLE_PRECOMPILED_BINARIES
	if [ ! -s "$(KALDI_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(KALDI_SRC_FILE)" 'https://github.com/synesthesiam/docker-kaldi/blob/master/download/kaldi-2020.tar.gz?raw=true' ; \
	fi
endif # ENABLE_PRECOMPILED_BINARIES
endif # ENABLE_KALDI

download-julius:
ifeq ($(ENABLE_JULIUS),yes)
ifeq ($(ENABLE_PRECOMPILED_BINARIES),yes)
	if [ ! -s "$(JULIUS_PRE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(JULIUS_PRE_FILE)" "https://github.com/synesthesiam/docker-julius/releases/download/v4.5/julius-4.5_$(JULIUS_ARCH).tar.gz" ; \
	fi
else # ENABLE_PRECOMPILED_BINARIES
	if [ ! -s "$(JULIUS_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(JULIUS_SRC_FILE)" 'https://github.com/synesthesiam/docker-julius/blob/master/download/julius-2019.tar.gz?raw=true' ; \
	fi
endif # ENABLE_PRECOMPILED_BINARIES
endif # ENABLE_JULIUS

download-deepspeech: download-kenlm
ifeq ($(ENABLE_DEEPSPEECH),yes)
	if [ ! -s "$(DEEPSPEECH_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(DEEPSPEECH_FILE)" "https://github.com/mozilla/DeepSpeech/releases/download/v0.6.1/native_client.$(DEEPSPEECH_ARCH).cpu.linux.tar.xz" ; \
	fi
endif # ENABLE_DEEPSPEECH

download-kenlm:
ifeq ($(ENABLE_KENLM),yes)
ifeq ($(ENABLE_PRECOMPILED_BINARIES),yes)
	if [ ! -s "$(KENLM_PRE_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(KENLM_PRE_FILE)" "https://github.com/synesthesiam/docker-kenlm/releases/download/v2020.03.28/kenlm-20200308_$(KENLM_ARCH).tar.gz" ; \
	fi
else # ENABLE_PRECOMPILED_BINARIES
	if [ ! -s "$(EIGEN_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(EIGEN_SRC_FILE)" 'https://github.com/synesthesiam/docker-kenlm/blob/master/download/eigen-3.2.8.tar.bz2?raw=true' ; \
	fi
	if [ ! -s "$(KENLM_SRC_FILE)" ]; then \
		$(DO_DOWNLOAD) "$(KENLM_SRC_FILE)" 'https://github.com/synesthesiam/docker-kenlm/blob/master/download/kenlm-20200308.tar.gz?raw=true' ; \
	fi
endif # ENABLE_PRECOMPILED_BINARIES
endif # ENABLE_KENLM

# -----------------------------------------------------------------------------
# Build from Source
# -----------------------------------------------------------------------------

.PHONY: build-init build-opengrm build-phonetisaurus build-kaldi build-julius build-deepspeech build-kenlm
build: build-init \
       build-opengrm \
       build-phonetisaurus \
       build-kaldi \
       build-julius \
       build-deepspeech

build-init:
	$(MKDIR_P) "$(BUILD_DIR)"

build-opengrm:
ifeq ($(ENABLE_OPENGRM),yes)
	if [ ! -s "$(OPENGRM_PRE_FILE)" ]; then \
		"$(srcdir)/scripts/build/build-opengrm.sh" "$(OPENGRM_SRC_FILE)" "$(OPENFST_SRC_FILE)" "$(BUILD_DIR)" "$(OPENGRM_PRE_FILE)" ; \
	fi
endif # ENABLE_OPENGRM

build-phonetisaurus:
ifeq ($(ENABLE_PHONETISAURUS),yes)
	if [ ! -s "$(PHONETISAURUS_PRE_FILE)" ]; then \
		"$(srcdir)/scripts/build/build-phonetisaurus.sh" "$(PHONETISAURUS_SRC_FILE)" "$(OPENFST_SRC_FILE)" "$(BUILD_DIR)" "$(PHONETISAURUS_PRE_FILE)" ; \
	fi
endif # ENABLE_PHONETISAURUS

build-kaldi:
ifeq ($(ENABLE_KALDI),yes)
	if [ ! -s "$(KALDI_PRE_FILE)" ]; then \
		"$(srcdir)/scripts/build/build-kaldi.sh" "$(KALDI_SRC_FILE)" "$(BUILD_DIR)" "$(KALDI_PRE_FILE)" ; \
	fi
endif # ENABLE_KALDI

build-julius:
ifeq ($(ENABLE_JULIUS),yes)
	if [ ! -s "$(JULIUS_PRE_FILE)" ]; then \
		"$(srcdir)/scripts/build/build-julius.sh" "$(JULIUS_SRC_FILE)" "$(BUILD_DIR)" "$(JULIUS_PRE_FILE)" ; \
	fi
endif # ENABLE_JULIUS

build-deepspeech: build-kenlm

build-kenlm:
ifeq ($(ENABLE_KENLM),no)
	if [ ! -s "$(KENLM_PRE_FILE)" ]; then \
		"$(srcdir)/scripts/build/build-kenlm.sh" "$(KENLM_SRC_FILE)" "$(EIGEN_SRC_FILE)" "$(BUILD_DIR)" "$(KENLM_PRE_FILE)" ; \
	fi
endif # ENABLE_KENLM

# -----------------------------------------------------------------------------

uninstall:
	rm -rvf $(pkgpythondir)
	rm -v $(pythondir)/$(PACKAGE_DISTNAME)-*.egg-info
ifeq ($(VIRTUALENV),yes)
	rm -rvf "$(VENV_DIR)"
endif


# Delete downloaded binaries and build artifacts
clean:
	"$(PYTHON)" setup.py clean
	rm -rvf "$(BUILD_DIR)"


# Clean up the output of configure
distclean:
	rm -v "$(srcdir)/config.log"
	rm -v "$(srcdir)/config.status"
	rm -rvf "$(srcdir)/autom4te.cache"
	rm -v "$(srcdir)/Makefile"

# You can either use the setup.py sdist command or you can roll your own here
dist:
	"$(PYTHON)" setup.py sdist

# Use the setup.py check command
check:
	"$(PYTHON)" setup.py check
	"$(DEST_DIR)$(prefix)/bin/voice2json" print-version

# setup.py might complain if a directory doesn't exist so just in case, make the directory
# here
installdirs:
	$(MKDIR_P) "$(DESTDIR)$(pkgpythondir)"
