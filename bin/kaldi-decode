#!/usr/bin/env bash

if [[ -z "${voice2json_dir}" ]]; then
    export voice2json_dir='/usr/lib/voice2json'
fi

if [[ -z "${kaldi_dir}" ]]; then
    CPU_ARCH="$(lscpu | awk '/^Architecture/{print $2}')"
    export kaldi_dir="${voice2json_dir}/build_${CPU_ARCH}/kaldi-master"
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${voice2json_dir}/etc/shflags"

# kaldi
DEFINE_string 'kaldi-dir' "${kaldi_dir}" 'Path to kaldi top-level directory'
DEFINE_string 'model-type' '' 'Type of kaldi model (gmm or nnet3)'
DEFINE_string 'model-dir' '' 'Directory with kaldi model'
DEFINE_string 'graph-dir' '' 'Directory with kaldi HCLG.fst (defaults to graph)'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

kaldi_dir="${FLAGS_kaldi_dir}"

if [[ ! -d "${kaldi_dir}" ]]; then
    echo "Kaldi does not exist at ${kaldi_dir}"
    exit 1
fi

model_type="${FLAGS_model_type}"

if [[ -z "${model_type}" ]]; then
    echo "Model type is required"
    exit 1
fi

model_dir="${FLAGS_model_dir}"

if [[ -z "${model_dir}" ]]; then
    echo "Model directory is required"
    exit 1
fi

if [[ ! -d "${model_dir}" ]]; then
    echo "Model directory does not exist at ${model_dir}"
    exit 1
fi

graph_dir="${FLAGS_graph_dir}"

if [[ -z "${graph_dir}" ]]; then
    graph_dir="${model_dir}/graph"
fi

# -----------------------------------------------------------------------------

# Need to make all paths absolute
kaldi_dir="$(realpath "${kaldi_dir}")"
model_dir="$(realpath "${model_dir}")"
graph_dir="$(realpath "${graph_dir}")"

# Required bin/lib directories
lib_dir="${kaldi_dir}/src/lib"
openfst_dir="${kaldi_dir}/tools/openfst"
utils_dir="${kaldi_dir}/egs/wsj/s5/utils"
steps_dir="${kaldi_dir}/egs/wsj/s5/steps"

# Force create a symbolic link to the "utils" directory.
# Some Kaldi scripts will crash without this.
rm -rf "${model_dir}/utils"
ln -fs "${utils_dir}" "${model_dir}/utils"

# Set up paths for Kaldi programs
export PATH="${kaldi_dir}/src/featbin:${kaldi_dir}/src/latbin:${kaldi_dir}/src/gmmbin:${kaldi_dir}/src/online2bin:$PATH"
export LD_LIBRARY_PATH="${lib_dir}:${openfst_dir}/lib:${LD_LIBRARY_PATH}"

# -----------------------------------------------------------------------------
# WAV files
# -----------------------------------------------------------------------------

# Create temporary directory and clean it up when script finishes
temp_dir="$(mktemp -d)"
function finish {
    rm -rf "${temp_dir}"
}

trap finish EXIT

# -----------------------------------------------------------------------------

# Total number of real-time seconds for all WAV files.
# Computed with soxi -D
total_wav_duration=0

# Mapping from WAV name (key) to its individual real-time duration.
# Used to estimate decoding time.
declare -A wav_durations

# Write spk2utt and wav.scp files
while read -r wav_path;
do
    wav_path="$(realpath "${wav_path}")"
    wav_name="$(basename "${wav_path}")"

    # Record WAV durations for transcription timing calculations
    wav_duration="$(soxi -D "${wav_path}")"
    total_wav_duration="$(bc <<<"${total_wav_duration}+${wav_duration}")"
    wav_durations["${wav_name}"]="${wav_duration}"

    # Convert to 16-bit 16Khz mono
    b64_name="$(echo "${wav_name}" | base64)"
    echo "utt_${b64_name} ${wav_path}" >> "${temp_dir}/wav.scp"

    # Assume from a single speaker
    echo "corpus utt_${b64_name}" >> "${temp_dir}/spk2utt"
done

# -----------------------------------------------------------------------------
# Decode
# -----------------------------------------------------------------------------

# Decodes using a GMM Kaldi model
function gmm_decode {
    # make_mfcc
    compute-mfcc-feats \
        --config="${model_dir}/conf/mfcc.conf" \
        "scp:${temp_dir}/wav.scp" \
        "ark,scp:${temp_dir}/feats.ark,${temp_dir}/feats.scp"

    # cmvn
    compute-cmvn-stats \
        "scp:${temp_dir}/feats.scp" \
        "ark,scp:${temp_dir}/cmvn.ark,${temp_dir}/cmvn.scp"

    # norm
    apply-cmvn \
        "scp:${temp_dir}/cmvn.scp" \
        "scp:${temp_dir}/feats.scp" \
        "ark,scp:${temp_dir}/feats_cmvn.ark,${temp_dir}/feats_cmvn.scp"

    # add_deltas
    add-deltas \
        "scp:${temp_dir}/feats_cmvn.scp" \
        "ark,scp:${temp_dir}/deltas.ark,${temp_dir}/deltas.scp"

    # decode
    gmm-latgen-faster \
        --word-symbol-table="${model_dir}/graph/words.txt" \
        "${model_dir}/model/final.mdl" \
        "${graph_dir}/HCLG.fst" \
        "scp:${temp_dir}/deltas.scp" \
        "ark,scp:${temp_dir}/lattices.ark,${temp_dir}/lattices.scp"

    # best path
    lattice-best-path \
        --print-args=false \
        --word-symbol-table="${model_dir}/graph/words.txt" \
        "ark:${temp_dir}/lattices.ark" \
        "ark,t:-" | \
        "${utils_dir}"/int2sym.pl \
                      -f 2- \
                      "${graph_dir}/words.txt" - \
                      2>&1 | \
        grep '^utt_' | \
        sed -e 's/^utt_//'
}

# Decodes using an nnet3 Kaldi model
function nnet3_decode {
    online_dir="${model_dir}/online"
    online2-wav-nnet3-latgen-faster \
        --online=false \
        --do-endpointing=false \
        --frame-subsampling-factor=3 \
        "--config=${online_dir}/conf/online.conf" \
        --max-active=7000 \
        --beam=15.0 \
        --lattice-beam=6.0 \
        --acoustic-scale=1.0 \
        "--word-symbol-table=${graph_dir}/words.txt" \
        "${model_dir}/model/final.mdl" \
        "${graph_dir}/HCLG.fst" \
        "ark:${temp_dir}/spk2utt" \
        "scp:${temp_dir}/wav.scp" \
        'ark:/dev/null' \
        2>&1 | \
        grep '^utt_' | \
        sed -e 's/^utt_//'
}

# -----------------------------------------------------------------------------

# Used to compute decode times
start_time="$(date -u +%s.%N)"

# Converts to decoding output of each WAV to jsonl format
function to_json {
    while read -r b64_name text;
    do
        if [[ -z "${total_seconds}" ]]; then
            # Record end time
            end_time="$(date -u +%s.%N)"
            total_seconds="$(bc <<<"${end_time}-${start_time}")"
        fi

        (
            wav_name="$(echo "${b64_name}" | base64 -d)"

            # Compute decode time by assuming that each WAV file took an amount of
            # time proportional to its real-time duration.
            wav_duration="${wav_durations["${wav_name}"]}"
            duration_proportion="$(bc -l <<<"${wav_duration}/${total_wav_duration}")"
            transcribe_seconds="$(bc -l <<<"${duration_proportion}*${total_seconds}" | awk '{printf "%f", $0}')"

            # Augment transcription with wav name and decode time
            jq -n -c \
               --arg t "${text}" \
               --argjson ws "${wav_duration}" \
               --argjson ts "${transcribe_seconds}" \
               '{ text: $t, wav_seconds: $ws, transcribe_seconds: $ts }'

        ) || continue
    done
}

# -----------------------------------------------------------------------------

# Do decoding
if [[ "${model_type}" == 'gmm' ]]; then
    gmm_decode | to_json
elif [[ "${model_type}" == 'nnet3' ]]; then
    nnet3_decode | to_json
else
    echo "Invalid model type"
    exit 1
fi
