#!/usr/bin/env bash

if [[ -z "${voice2json_dir}" ]]; then
    export voice2json_dir='/usr/lib/voice2json'
fi

if [[ -z "${kaldi_dir}" ]]; then
    CPU_ARCH="$(lscpu | awk '/^Architecture/{print $2}')"
    export kaldi_dir="${voice2json_dir}/build_${CPU_ARCH}/kaldi-master"
fi

# -----------------------------------------------------------------------------
# Command-line Arguments
# -----------------------------------------------------------------------------

. "${voice2json_dir}/etc/shflags"

# kaldi
DEFINE_string 'kaldi-dir' "${kaldi_dir}" 'Path to kaldi top-level directory'
DEFINE_string 'model-dir' '' 'Directory with kaldi model'
DEFINE_string 'graph-dir' '' 'Directory with kaldi HCLG.fst (defaults to graph)'

DEFINE_string 'data-dir' "" 'Directory with data'
DEFINE_string 'align-dir' "" 'Directory to output alignment information'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# -----------------------------------------------------------------------------
# Default Settings
# -----------------------------------------------------------------------------

set -e

kaldi_dir="${FLAGS_kaldi_dir}"

if [[ ! -d "${kaldi_dir}" ]]; then
    echo "Kaldi does not exist at ${kaldi_dir}"
    exit 1
fi

model_dir="${FLAGS_model_dir}"

if [[ -z "${model_dir}" ]]; then
    echo "Model directory is required"
    exit 1
fi

if [[ ! -d "${model_dir}" ]]; then
    echo "Model directory does not exist at ${model_dir}"
    exit 1
fi

graph_dir="${FLAGS_graph_dir}"

if [[ -z "${graph_dir}" ]]; then
    graph_dir="${model_dir}/graph"
fi

data_dir="${FLAGS_data_dir}"

if [[ ! -d "${data_dir}" ]]; then
    echo "Data directory does not exist at ${data_dir}"
    exit 1
fi

align_dir="${FLAGS_align_dir}"

if [[ -z "${align_dir}" ]]; then
    echo "Alignment directory is required"
    exit 1
fi

mkdir -p "${align_dir}"

# -----------------------------------------------------------------------------

# Need to make all paths absolute
kaldi_dir="$(realpath "${kaldi_dir}")"
model_dir="$(realpath "${model_dir}")"
graph_dir="$(realpath "${graph_dir}")"

# Required bin/lib directories
lib_dir="${kaldi_dir}/src/lib"
openfst_dir="${kaldi_dir}/tools/openfst"
utils_dir="${kaldi_dir}/egs/wsj/s5/utils"
steps_dir="${kaldi_dir}/egs/wsj/s5/steps"
bin_dir="${kaldi_dir}/src/bin"
fstbin_dir="${kaldi_dir}/src/fstbin"
lmbin_dir="${kaldi_dir}/src/lmbin"

# Create a symbolic link to the "utils" directory.
# Some Kaldi scripts will crash without this.
if [[ ! -e "${model_dir}/utils" ]]; then
    ln -fs "${utils_dir}" "${model_dir}/utils"
fi

# Set up paths for Kaldi programs
export PATH="${kaldi_dir}/src/featbin:${bin_dir}:$PATH"
export PATH="${kaldi_dir}/src/latbin:${kaldi_dir}/src/gmmbin:${kaldi_dir}/src/online2bin:$PATH"
export PATH="${utils_dir}:${fstbin_dir}:${lmbin_dir}:${openfst_dir}/bin:$PATH"
export LD_LIBRARY_PATH="${lib_dir}:${openfst_dir}/lib:${LD_LIBRARY_PATH}"

# -----------------------------------------------------------------------------
# WAV files
# -----------------------------------------------------------------------------

# # Create temporary directory and clean it up when script finishes
# temp_dir="$(mktemp -d)"
# function finish {
#     rm -rf "${temp_dir}"
# }

# trap finish EXIT

# -----------------------------------------------------------------------------

# # Total number of real-time seconds for all WAV files.
# # Computed with soxi -D
# total_wav_duration=0

# # Mapping from WAV name (key) to its individual real-time duration.
# # Used to estimate decoding time.
# declare -A wav_durations

# # Write spk2utt and wav.scp files
# while read -r wav_path;
# do
#     wav_path="$(realpath "${wav_path}")"
#     wav_name="$(basename "${wav_path}")"

#     # Record WAV durations for transcription timing calculations
#     wav_duration="$(soxi -D "${wav_path}")"
#     total_wav_duration="$(bc <<<"${total_wav_duration}+${wav_duration}")"
#     wav_durations["${wav_name}"]="${wav_duration}"

#     # Convert to 16-bit 16Khz mono
#     b64_name="$(echo "${wav_name}" | base64)"
#     echo "utt_${b64_name} ${wav_path}" >> "${temp_dir}/wav.scp"

#     # Assume from a single speaker
#     echo "corpus utt_${b64_name}" >> "${temp_dir}/spk2utt"
# done

# -----------------------------------------------------------------------------
# Align
# -----------------------------------------------------------------------------

# make_mfcc
# compute-mfcc-feats \
#     --print-args=false \
#     --config="${model_dir}/conf/mfcc_hires.conf" \
#     "scp:${data_dir}/wav.scp" \
#     "ark,scp:${data_dir}/feats.ark,${data_dir}/feats.scp"

# # cmvn
# compute-cmvn-stats \
#     --print-args=false \
#     "scp:${data_dir}/feats.scp" \
#     "ark,scp:${data_dir}/cmvn.ark,${data_dir}/cmvn.scp"

# # norm
# apply-cmvn \
#     --print-args=false \
#     "scp:${temp_dir}/cmvn.scp" \
#     "scp:${temp_dir}/feats.scp" \
#     "ark,scp:${temp_dir}/feats_cmvn.ark,${temp_dir}/feats_cmvn.scp" \
#     2>/dev/null \
#     >/dev/null

# # add_deltas
# add-deltas \
#     --print-args=false \
#     "scp:${temp_dir}/feats_cmvn.scp" \
#     "ark,scp:${temp_dir}/deltas.ark,${temp_dir}/deltas.scp" \
#     2>/dev/null \
#     >/dev/null

"${steps_dir}/align_si.sh" \
    --nj 1 \
    "${data_dir}" \
    "${model_dir}/data/lang" \
    "${model_dir}/model" \
    "${align_dir}"
